{"version":3,"file":"client.js","sources":["../../src/client.ts"],"sourcesContent":["import { Extras, Scope } from \"./index\";\r\nimport { AsyncContextStack } from \"./async-context\";\r\nimport { BaseClient } from \"./baseclient\";\r\nimport { getMainCarrier, getRibbanCarrier } from \"./carrier\";\r\nimport { getClient, getCurrentScope, getIsolationScope } from \"./current-scopes\";\r\nimport { HostComponent } from \"./dsn\";\r\nimport { ClientOptions, Options } from \"./options\";\r\nimport { Session, SessionAggregates } from \"./session\";\r\nimport { SessionFlusher } from \"./sessionflusher\";\r\nimport { BaseTransportOptions, Transport, TransportMakeRequestResponse } from \"./transport\";\r\nimport { resolvedSyncPromise } from \"./transport/syncpromise\";\r\nimport { Envelope, Event, EventHint, SeverityLevel } from \"./types\";\r\nimport { Exception } from \"./types/exception\";\r\nimport { Mechanism } from \"./types/mechanism\";\r\nimport { StackFrame } from \"./types/stackframe\";\r\nimport { StackParser } from \"./types/stacktrace\";\r\nimport { logger } from \"./utils/logger\";\r\nimport { normalizeToSize } from \"./utils/normalize\";\r\nimport { extractExceptionKeysForMessage, isDOMError, isDOMException, isError, isErrorEvent, isEvent, isPlainObject } from \"./utils/object\";\r\nimport { ParameterizedString } from \"./utils/parameterize\";\r\nimport { isParameterizedString } from \"./transport/is\";\r\nimport { addExceptionMechanism, addExceptionTypeValue } from \"./utils/misc\";\r\n\r\n/**\r\n * User-Facing Ribban SDK Client.\r\n *\r\n * This interface contains all methods to interface with the SDK once it has\r\n * been installed. It allows to send events to Ribban, record breadcrumbs and\r\n * set a context included in every event. Since the SDK mutates its environment,\r\n * there will only be one instance during runtime.\r\n *\r\n */\r\nexport interface Client<O extends ClientOptions = ClientOptions> {\r\n    /**\r\n     * Captures an exception event and sends it to Ribban.\r\n     *\r\n     * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.\r\n     *\r\n     * @param exception An exception-like object.\r\n     * @param hint May contain additional information about the original exception.\r\n     * @param currentScope An optional scope containing event metadata.\r\n     * @returns The event id\r\n     */\r\n    captureException(exception: any, hint?: EventHint, currentScope?: Scope): string;\r\n\r\n    /**\r\n     * Captures a message event and sends it to Ribban.\r\n     *\r\n     * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.\r\n     *\r\n     * @param message The message to send to Ribban.\r\n     * @param level Define the level of the message.\r\n     * @param hint May contain additional information about the original exception.\r\n     * @param currentScope An optional scope containing event metadata.\r\n     * @returns The event id\r\n     */\r\n    captureMessage(message: string, level?: SeverityLevel, hint?: EventHint, currentScope?: Scope): string;\r\n\r\n    /**\r\n     * Captures a manually created event and sends it to Ribban.\r\n     *\r\n     * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.\r\n     *Ribban\r\n     * @param event The event to send to Ribban.\r\n     * @param hint May contain additional information about the original exception.\r\n     * @param currentScope An optional scope containing event metadata.\r\n     * @returns The event id\r\n     */\r\n    captureEvent(event: Event, hint?: EventHint, currentScope?: Scope): string;\r\n\r\n    /**\r\n     * Captures a session\r\n     *\r\n     * @param session Session to be delivered\r\n     */\r\n    captureSession(session: Session): void;\r\n\r\n    /** Returns the current Dsn. */\r\n    getDsn(): HostComponent | undefined;\r\n\r\n    /** Returns the current options. */\r\n    getOptions(): O;\r\n\r\n\r\n    /**\r\n     * Returns the transport that is used by the client.\r\n     * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\r\n     *\r\n     * @returns The transport.\r\n     */\r\n    getTransport(): Transport | undefined;\r\n\r\n    /**\r\n     * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.\r\n     *\r\n     * @param timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause\r\n     *   the client to wait until all events are sent before disabling itself.\r\n     * @returns A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if\r\n     * it doesn't.\r\n     */\r\n    close(timeout?: number): PromiseLike<boolean>;\r\n\r\n    /**\r\n     * Wait for all events to be sent or the timeout to expire, whichever comes first.\r\n     *\r\n     * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will\r\n     *   cause the client to wait until all events are sent before resolving the promise.\r\n     * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\r\n     * still events in the queue when the timeout is reached.\r\n     */\r\n    flush(timeout?: number): PromiseLike<boolean>;\r\n\r\n    /**\r\n     * Initialize this client.\r\n     * Call this after the client was set on a scope.\r\n     */\r\n    init(): void;\r\n\r\n    /** Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`. */\r\n    eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\r\n\r\n    /** Submits the event to Ribban */\r\n    sendEvent(event: Event, hint?: EventHint): void;\r\n\r\n\r\n    /** Submits the session to Ribban */\r\n    sendSession(session: Session | SessionAggregates): void;\r\n\r\n    /** Sends an envelope to Ribban */\r\n    sendEnvelope(envelope: Envelope): PromiseLike<TransportMakeRequestResponse>;\r\n\r\n    // HOOKS\r\n    /* eslint-disable @typescript-eslint/unified-signatures */\r\n\r\n    /**\r\n     * Register a callback for transaction start and finish.\r\n     */\r\n    on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): void;\r\n\r\n    /**\r\n     * Register a callback for before sending an event.\r\n     * This is called right before an event is sent and should not be used to mutate the event.\r\n     * Receives an Event & EventHint as arguments.\r\n     */\r\n    on(hook: 'beforeSendEvent', callback: (event: Event, hint?: EventHint | undefined) => void): void;\r\n\r\n    /**\r\n     * Register a callback for preprocessing an event,\r\n     * before it is passed to (global) event processors.\r\n     * Receives an Event & EventHint as arguments.\r\n     */\r\n    on(hook: 'preprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): void;\r\n\r\n    /**\r\n     * Register a callback for when an event has been sent.\r\n     */\r\n    on(hook: 'afterSendEvent', callback: (event: Event, sendResponse: TransportMakeRequestResponse) => void): void;\r\n\r\n    /**\r\n     * A hook that is called when the client is flushing\r\n     */\r\n    on(hook: 'flush', callback: () => void): void;\r\n\r\n    /**\r\n     * A hook that is called when the client is closing\r\n     */\r\n    on(hook: 'close', callback: () => void): void;\r\n\r\n    /*\r\n     * Fire a hook event for envelope creation and sending. Expects to be given an envelope as the\r\n     * second argument.\r\n     */\r\n    emit(hook: 'beforeEnvelope', envelope: Envelope): void;\r\n\r\n    /**\r\n     * Fire a hook event before sending an event.\r\n     * This is called right before an event is sent and should not be used to mutate the event.\r\n     * Expects to be given an Event & EventHint as the second/third argument.\r\n     */\r\n    emit(hook: 'beforeSendEvent', event: Event, hint?: EventHint): void;\r\n\r\n    /**\r\n     * Fire a hook event to process events before they are passed to (global) event processors.\r\n     * Expects to be given an Event & EventHint as the second/third argument.\r\n     */\r\n    emit(hook: 'preprocessEvent', event: Event, hint?: EventHint): void;\r\n\r\n    /*\r\n     * Fire a hook event after sending an event. Expects to be given an Event as the\r\n     * second argument.\r\n     */\r\n    emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse): void;\r\n\r\n    /**\r\n     * Emit a hook event for client flush\r\n     */\r\n    emit(hook: 'flush'): void;\r\n\r\n    /**\r\n     * Emit a hook event for client close\r\n     */\r\n    emit(hook: 'close'): void;\r\n\r\n    /* eslint-enable @typescript-eslint/unified-signatures */\r\n}\r\n\r\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\r\n    platform?: string;\r\n    runtime?: { name: string; version?: string };\r\n    serverName?: string;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Options added to the Browser SDK's init options that are specific for Replay.\r\n * Note: This type was moved to @sentry/types to avoid a circular dependency between Browser and Replay.\r\n */\r\nexport type BrowserClientReplayOptions = {\r\n    /**\r\n     * The sample rate for session-long replays.\r\n     * 1.0 will record all sessions and 0 will record none.\r\n     */\r\n    replaysSessionSampleRate?: number;\r\n\r\n    /**\r\n     * The sample rate for sessions that has had an error occur.\r\n     * This is independent of `sessionSampleRate`.\r\n     * 1.0 will record all sessions and 0 will record none.\r\n     */\r\n    replaysOnErrorSampleRate?: number;\r\n};\r\n\r\nexport type BrowserClientProfilingOptions = {\r\n    /**\r\n     * The sample rate for profiling\r\n     * 1.0 will profile all transactions and 0 will profile none.\r\n     */\r\n    profilesSampleRate?: number;\r\n};\r\n\r\nexport interface BrowserTransportOptions extends BaseTransportOptions {\r\n    /** Fetch API init parameters. Used by the FetchTransport */\r\n    fetchOptions?: RequestInit;\r\n    /** Custom headers for the transport. Used by the XHRTransport and FetchTransport */\r\n    headers?: { [key: string]: string };\r\n}\r\n\r\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions> &\r\n    BrowserClientReplayOptions &\r\n    BrowserClientProfilingOptions & {\r\n        /** If configured, this URL will be used as base URL for lazy loading integration. */\r\n        cdnBaseUrl?: string;\r\n    };\r\n\r\n\r\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\r\n    public constructor(options: BrowserClientOptions) {\r\n        super(options);\r\n    };\r\n\r\n    flush(timeout?: number | undefined): PromiseLike<boolean> {\r\n        return super.flush(timeout);\r\n    }\r\n\r\n    public eventFromException(exception: any, hint?: EventHint | undefined): PromiseLike<Event> {\r\n        console.log('Getting Event from Exception.', exception)\r\n\r\n        return eventFromException(this.options.stackParser, exception, hint, this.options.attachStacktrace);\r\n    }\r\n\r\n    public eventFromMessage(message: string, level?: SeverityLevel, hint?: EventHint): PromiseLike<Event> {\r\n        return eventFromMessage(this.options.stackParser, message, level, hint, this.options.attachStacktrace);\r\n    };\r\n\r\n    protected _prepareEvent(event: Event, hint: EventHint, currentScope?: Scope | undefined): PromiseLike<Event | null> {\r\n        event.platform = event.platform || 'javascript';\r\n        return super._prepareEvent(event, hint, currentScope);\r\n    };\r\n};\r\n\r\nexport function eventFromClientUnknownInput(\r\n    client: Client,\r\n    stackParser: StackParser,\r\n    exception: unknown,\r\n    hint?: EventHint,\r\n): Event {\r\n    const providedMechanism: Mechanism | undefined =\r\n        hint && hint.data && (hint.data as { mechanism: Mechanism }).mechanism;\r\n    const mechanism: Mechanism = providedMechanism || {\r\n        handled: true,\r\n        type: 'generic',\r\n    };\r\n\r\n    const [ex, extras] = getException(client, mechanism, exception, hint);\r\n\r\n    const event: Event = {\r\n        exception: {\r\n            values: [exceptionFromError(stackParser, ex)],\r\n        },\r\n    };\r\n\r\n    if (extras) {\r\n        event.extra = extras;\r\n    }\r\n\r\n    addExceptionTypeValue(event, undefined, undefined);\r\n    addExceptionMechanism(event, mechanism);\r\n\r\n    return {\r\n        ...event,\r\n        event_id: hint && hint.event_id,\r\n    };\r\n}\r\n\r\nexport function eventFromUnknownInput(\r\n    stackParser: StackParser,\r\n    exception: unknown,\r\n    syntheticException?: Error,\r\n    attachStacktrace?: boolean,\r\n    isUnhandledRejection?: boolean,\r\n): Event {\r\n    let event: Event;\r\n\r\n    console.log('Getting Event from unknown input.', exception)\r\n\r\n    if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\r\n        const errorEvent = exception as ErrorEvent;\r\n        event = eventFromError(stackParser, errorEvent.error as Error);\r\n\r\n        console.log('Event from Error Event', event);\r\n    }\r\n\r\n    if (isDOMError(exception) || isDOMException(exception as DOMException)) {\r\n        const domException = exception as DOMException;\r\n\r\n        if ('stack' in (exception as Error)) {\r\n            event = eventFromError(stackParser, domException as Error);\r\n        } else {\r\n            const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\r\n            const message = domException.message ? `${name}: ${domException.message}` : name;\r\n            event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\r\n            addExceptionTypeValue(event, message);\r\n        }\r\n    }\r\n\r\n    if (isError(exception)) {\r\n        console.log('Event from Error', exception);\r\n\r\n        return eventFromError(stackParser, exception);\r\n    }\r\n\r\n    if (isPlainObject(exception) || isEvent(exception)) {\r\n        const objectException = exception as Record<string, unknown>;\r\n        event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\r\n        addExceptionMechanism(event, {\r\n            synthetic: true,\r\n        });\r\n\r\n        return event;\r\n    };\r\n\r\n    console.log('Event from String', exception)\r\n\r\n    event = eventFromString(stackParser, `${exception}`, syntheticException, attachStacktrace);\r\n    addExceptionTypeValue(event, `${exception}`, undefined);\r\n    addExceptionMechanism(event, {\r\n        synthetic: true,\r\n    })\r\n\r\n    return event;\r\n}\r\n\r\nfunction eventFromString(\r\n    stackParser: StackParser,\r\n    message: ParameterizedString,\r\n    syntheticException?: Error,\r\n    attachStacktrace?: boolean,\r\n): Event {\r\n    const event: Event = {};\r\n\r\n    if (attachStacktrace && syntheticException) {\r\n        const frames = parseStackFrames(stackParser, syntheticException);\r\n        if (frames.length) {\r\n            event.exception = {\r\n                values: [{ value: message, stacktrace: { frames } }],\r\n            };\r\n        }\r\n    }\r\n\r\n    if (isParameterizedString(message)) {\r\n        const { __ribban_template_string__, __ribban_template_values__ } = message;\r\n\r\n        event.logentry = {\r\n            message: __ribban_template_string__,\r\n            params: __ribban_template_values__,\r\n        };\r\n\r\n        return event;\r\n    }\r\n\r\n    event.message = message;\r\n    return event;\r\n}\r\n\r\nexport function eventFromMessage(\r\n    stackParser: StackParser,\r\n    message: ParameterizedString,\r\n    level: SeverityLevel = 'info',\r\n    hint?: EventHint,\r\n    attachStacktrace?: boolean,\r\n): PromiseLike<Event> {\r\n    const syntheticException = (hint && hint.syntheticException) || undefined;\r\n\r\n    const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\r\n    event.level = level;\r\n\r\n    if (hint && hint.event_id) {\r\n        event.event_id = hint.event_id;\r\n    }\r\n\r\n    return resolvedSyncPromise(event);\r\n}\r\n\r\n\r\nfunction eventFromError(stackParser: StackParser, ex: Error): Event {\r\n    return {\r\n        exception: {\r\n            values: [exceptionFromError(stackParser, ex)],\r\n        },\r\n    };\r\n}\r\n\r\n\r\nexport function eventFromException(\r\n    stackParser: StackParser,\r\n    exception: unknown,\r\n    hint?: EventHint,\r\n    attachStacktrace?: boolean,\r\n): PromiseLike<Event> {\r\n    console.log('Getting Event from Exception.', exception)\r\n\r\n    const syntethicException = (hint && hint.syntheticException) || undefined;\r\n    const event = eventFromUnknownInput(stackParser, exception, syntethicException, attachStacktrace);\r\n\r\n    addExceptionMechanism(event);\r\n    event.level = 'error';\r\n\r\n    console.log(event);\r\n\r\n    if (hint && hint.event_id) {\r\n        event.event_id = hint.event_id;\r\n    };\r\n\r\n    return resolvedSyncPromise(event);\r\n}\r\n\r\n\r\nexport function setCurrentClient(client: Client): void {\r\n    getCurrentScope().setClient(client);\r\n    registerClientOnGlobalHub(client);\r\n}\r\n\r\nfunction registerClientOnGlobalHub(client: Client): void {\r\n    const ribbanGlobal = getRibbanCarrier(getMainCarrier()) as { hub?: AsyncContextStack };\r\n    if (ribbanGlobal.hub && typeof ribbanGlobal.hub.getStackTop === 'function') {\r\n        ribbanGlobal.hub.getStackTop().client = client;\r\n    }\r\n}\r\n\r\n\r\nfunction getException(\r\n    client: Client,\r\n    mechanism: Mechanism,\r\n    exception: unknown,\r\n    hint?: EventHint,\r\n): [Error, Extras | undefined] {\r\n    if (isError(exception)) {\r\n        return [exception, undefined];\r\n    }\r\n\r\n    // Mutate this!\r\n    mechanism.synthetic = true;\r\n\r\n    if (isPlainObject(exception)) {\r\n        const normalizeDepth = client && client.getOptions().normalizeDepth;\r\n        const extras = { ['__serialized__']: normalizeToSize(exception as Record<string, unknown>, normalizeDepth) };\r\n\r\n        const errorFromProp = getErrorPropertyFromObject(exception);\r\n        if (errorFromProp) {\r\n            return [errorFromProp, extras];\r\n        }\r\n\r\n        const message = getMessageForObject(exception);\r\n        const ex = (hint && hint.syntheticException) || new Error(message);\r\n        ex.message = message;\r\n\r\n        return [ex, extras];\r\n    }\r\n\r\n    // This handles when someone does: `throw \"something awesome\";`\r\n    // We use synthesized Error here so we can extract a (rough) stack trace.\r\n    const ex = (hint && hint.syntheticException) || new Error(exception as string);\r\n    ex.message = `${exception}`;\r\n\r\n    return [ex, undefined];\r\n}\r\n\r\nfunction getMessageForObject(exception: Record<string, unknown>): string {\r\n    if ('name' in exception && typeof exception.name === 'string') {\r\n        let message = `'${exception.name}' captured as exception`;\r\n\r\n        if ('message' in exception && typeof exception.message === 'string') {\r\n            message += ` with message '${exception.message}'`;\r\n        }\r\n\r\n        return message;\r\n    } else if ('message' in exception && typeof exception.message === 'string') {\r\n        return exception.message;\r\n    }\r\n\r\n    const keys = extractExceptionKeysForMessage(exception);\r\n\r\n    // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\r\n    // We still want to try to get a decent message for these cases\r\n    if (isErrorEvent(exception)) {\r\n        return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\r\n    }\r\n\r\n    const className = getObjectClassName(exception);\r\n\r\n    return `${className && className !== 'Object' ? `'${className}'` : 'Object'} captured as exception with keys: ${keys}`;\r\n}\r\n\r\nfunction eventFromPlainObject(\r\n    stackParser: StackParser,\r\n    exception: Record<string, unknown>,\r\n    syntheticException?: Error,\r\n    isUnhandledRejection?: boolean,\r\n): Event {\r\n    const client = getClient();\r\n    const normalizeDepth = client && client.getOptions().normalizeDepth;\r\n\r\n    // If we can, we extract an exception from the object properties\r\n    const errorFromProp = getErrorPropertyFromObject(exception);\r\n\r\n    const extra = {\r\n        __serialized__: normalizeToSize(exception, normalizeDepth),\r\n    };\r\n\r\n    if (errorFromProp) {\r\n        return {\r\n            exception: {\r\n                values: [exceptionFromError(stackParser, errorFromProp)],\r\n            },\r\n            extra,\r\n        };\r\n    }\r\n\r\n    const event = {\r\n        exception: {\r\n            values: [\r\n                {\r\n                    type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\r\n                    value: getNonErrorObjectExceptionValue(exception, { isUnhandledRejection }),\r\n                } as Exception,\r\n            ],\r\n        },\r\n        extra,\r\n    } satisfies Event;\r\n\r\n    if (syntheticException) {\r\n        const frames = parseStackFrames(stackParser, syntheticException);\r\n        if (frames.length) {\r\n            // event.exception.values[0] has been set above\r\n            event.exception.values[0].stacktrace = { frames };\r\n        }\r\n    }\r\n\r\n    return event;\r\n}\r\n\r\nfunction getObjectClassName(obj: unknown): string | undefined | void {\r\n    try {\r\n        const prototype: unknown | null = Object.getPrototypeOf(obj);\r\n        return prototype ? prototype.constructor.name : undefined;\r\n    } catch (e) {\r\n        // ignore errors here\r\n    }\r\n}\r\n\r\n\r\nexport function exceptionFromError(stackParser: StackParser, error: Error): Exception {\r\n    const exception: Exception = {\r\n        type: error.name || error.constructor.name,\r\n        value: error.message,\r\n    };\r\n\r\n    console.log(exception);\r\n\r\n    const frames = parseStackFrames(stackParser, error);\r\n    if (frames.length) {\r\n        exception.stacktrace = { frames };\r\n    }\r\n\r\n    return exception;\r\n}\r\n\r\nexport function parseStackFrames(stackParser: StackParser, error: Error): StackFrame[] {\r\n    return stackParser(error.stack || '', 1);\r\n}\r\n\r\nfunction getErrorPropertyFromObject(obj: Record<string, unknown>): Error | undefined {\r\n    for (const prop in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\r\n            const value = obj[prop];\r\n            if (value instanceof Error) {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction getNonErrorObjectExceptionValue(\r\n    exception: Record<string, unknown>,\r\n    { isUnhandledRejection }: { isUnhandledRejection?: boolean },\r\n): string {\r\n    const keys = extractExceptionKeysForMessage(exception);\r\n    const captureType = isUnhandledRejection ? 'promise rejection' : 'exception';\r\n\r\n    // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\r\n    // We still want to try to get a decent message for these cases\r\n    if (isErrorEvent(exception)) {\r\n        return `Event \\`ErrorEvent\\` captured as ${captureType} with message \\`${exception.message}\\``;\r\n    }\r\n\r\n    if (isEvent(exception)) {\r\n        const className = getObjectClassName(exception);\r\n        return `Event \\`${className}\\` (type=${exception.type}) captured as ${captureType}`;\r\n    }\r\n\r\n    return `Object captured as ${captureType} with keys: ${keys}`;\r\n}"],"names":[],"mappings":"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"}