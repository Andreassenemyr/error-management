{"version":3,"file":"base.js","sources":["../../../src/transport/base.ts"],"sourcesContent":["import { createEnvelope, serializeEnvelope } from \"../envelope\";\nimport { InternalBaseTransportOptions, Transport, TransportMakeRequestResponse, TransportRequestExecutor } from \"../transport\";\nimport { Envelope, EnvelopeItem, EnvelopeItemType, Event, EventItem } from \"../types\";\nimport { RibbanError } from \"../utils/error\";\nimport { logger } from \"../utils/logger\";\nimport { PromiseBuffer, makePromiseBuffer } from \"./promisebuffer\";\nimport { resolvedSyncPromise } from \"./syncpromise\";\n\nexport type RateLimits = Record<string, string>;\n\nexport function createTransport(\n    options: InternalBaseTransportOptions,\n    makeRequest: TransportRequestExecutor,\n    buffer: PromiseBuffer<TransportMakeRequestResponse> = makePromiseBuffer(\n        options.bufferSize || 64\n    ),\n): Transport {\n    let rateLimits: RateLimits = {};\n    const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n    function send(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n        const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n        forEachEnvelopeItem(envelope, (item, type) => {\n            filteredEnvelopeItems.push(item);\n        });\n\n        if (filteredEnvelopeItems.length == 0) {\n            return resolvedSyncPromise({});\n        }\n\n        const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n        const recordEnvelopeLoss = (reason: 'before_send' | 'event_processor' | 'network_error' | 'queue_overflow'): void => {\n            forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n                const event: Event | undefined = getEventForEnvelopeItem(item, type);\n                \n            })\n        };\n\n        const requestTask = (): PromiseLike<TransportMakeRequestResponse> => \n            makeRequest({ body: serializeEnvelope(filteredEnvelope) }).then(\n                response => {\n                    if (response.statusCode !== undefined && (response.statusCode < 200 && response.statusCode >= 300)) {\n                        console.warn(`Ribban responded with status code ${response.statusCode} to sent event.`);\n                    }\n                    \n                    return response;\n                },\n                error => {\n                    recordEnvelopeLoss('network_error');\n                    throw error;\n                }\n            )\n\n        return buffer.add(requestTask).then(\n            result => result,\n            error => {\n                if (error instanceof RibbanError) {\n                    logger.warn('Skipped sending event because buffer is full.');\n                    recordEnvelopeLoss('queue_overflow');\n                    return resolvedSyncPromise({});\n                } else {\n                    throw error;\n                }\n            }\n        )\n    }\n\n    return {\n        send: send,\n        flush: flush,\n    }\n}\n\nexport function forEachEnvelopeItem<E extends Envelope>(\n    envelope: Envelope,\n    callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n  ): boolean {\n    const envelopeItems = envelope[1];\n  \n    for (const envelopeItem of envelopeItems) {\n      const envelopeItemType = envelopeItem[0].type;\n      const result = callback(envelopeItem, envelopeItemType);\n  \n      if (result) {\n        return true;\n      }\n    }\n  \n    return false;\n}\n  \n\nfunction getEventForEnvelopeItem(item: Envelope[1][number], type: EnvelopeItemType): Event | undefined {\n    if (type !== 'event' && type !== 'transaction') {\n      return undefined;\n    }\n  \n    return Array.isArray(item) ? (item as EventItem)[1] : undefined;\n}"],"names":[],"mappings":"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"}