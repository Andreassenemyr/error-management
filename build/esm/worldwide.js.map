{"version":3,"file":"worldwide.js","sources":["../../src/worldwide.ts"],"sourcesContent":["import { Scope } from \"./index\";\n\nexport interface InternalGlobal {\n    navigator?: { userAgent?: string };\n    console: Console;\n    Ribban?: any;\n    onerror?: {\n        (event: object | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n        __RIBBAN_INSTRUMENTED__?: true;\n        __RIBBAN_LOADER__?: true;\n    };\n    onunhandledrejection?: {\n        (event: unknown): boolean;\n        __RIBBAN_INSTRUMENTED__?: true;\n        __RIBBAN_LOADER__?: true;\n    };\n    RIBBAN_ENVIRONMENT?: string;\n    RIBBAN_DSN?: string;\n    RIBBAN_RELEASE?: {\n        id?: string;\n    };\n    /**\n     * Debug IDs are indirectly injected by Ribban CLI or bundler plugins to directly reference a particular source map\n     * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n     * file.\n     */\n    _ribbanDebugIds?: Record<string, string>;\n    __RIBBAN__: {\n        hub: any;\n        logger: any;\n        extensions?: {\n          /** Extension methods for the hub, which are bound to the current Hub instance */\n          // eslint-disable-next-line @typescript-eslint/ban-types\n          [key: string]: Function;\n        };\n        globalScope: Scope | undefined;\n        defaultCurrentScope: Scope | undefined;\n        defaultIsolationScope: Scope | undefined;\n        /** Overwrites TextEncoder used in `@ribban/utils`, need for `react-native@0.73` and older */\n        encodePolyfill?: (input: string) => Uint8Array;\n        /** Overwrites TextDecoder used in `@ribban/utils`, need for `react-native@0.73` and older */\n        decodePolyfill?: (input: Uint8Array) => string;\n    };\n\n    /**\n     * Raw module metadata that is injected by bundler plugins.\n     *\n     * Keys are `error.stack` strings, values are the metadata.\n     */\n    _ribbanModuleMetadata?: Record<string, any>;\n    _ribbanEsmLoaderHookRegistered?: boolean;\n}\n\nexport const GLOBAL_OBJ = globalThis as unknown as InternalGlobal;\n\nexport function getGlobalSingleton<T>(name: keyof InternalGlobal['__RIBBAN__'], creator: () => T, obj?: unknown): T {\n    const gbl = (obj || GLOBAL_OBJ) as InternalGlobal;\n\n    const __RIBBAN__ = (gbl.__RIBBAN__ = gbl.__RIBBAN__ || {\n        hub: undefined,\n        logger: undefined,\n        globalScope: undefined,\n        defaultCurrentScope: undefined,\n        defaultIsolationScope: undefined,\n    });\n\n    const singleton = __RIBBAN__[name] || (__RIBBAN__[name] = creator());\n    return singleton;\n}"],"names":[],"mappings":"AAqDO,MAAM,UAAW,GAAE,UAAW,EAAA;AACrC;AACO,SAAS,kBAAkB,CAAI,IAAI,EAAsC,OAAO,EAAW,GAAG,EAAe;AACpH,IAAI,MAAM,GAAI,IAAU,UAAU,CAAE,EAAA;AACpC;AACA,IAAI,MAAM,UAAW,IAAG,GAAG,CAAC,UAAA,GAAa,GAAG,CAAC,UAAA,IAAc;AAC3D,QAAQ,GAAG,EAAE,SAAS;AACtB,QAAQ,MAAM,EAAE,SAAS;AACzB,QAAQ,WAAW,EAAE,SAAS;AAC9B,QAAQ,mBAAmB,EAAE,SAAS;AACtC,QAAQ,qBAAqB,EAAE,SAAS;AACxC,KAAK,CAAC,CAAA;AACN;AACA,IAAI,MAAM,SAAU,GAAE,UAAU,CAAC,IAAI,CAAE,KAAI,UAAU,CAAC,IAAI,CAAA,GAAI,OAAO,EAAE,CAAC,CAAA;AACxE,IAAI,OAAO,SAAS,CAAA;AACpB;;;;"}