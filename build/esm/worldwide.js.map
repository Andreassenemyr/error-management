{"version":3,"file":"worldwide.js","sources":["../../src/worldwide.ts"],"sourcesContent":["import { Scope } from \"./index\";\r\n\r\nexport interface InternalGlobal {\r\n    navigator?: { userAgent?: string };\r\n    console: Console;\r\n    Ribban?: any;\r\n    onerror?: {\r\n        (event: object | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\r\n        __RIBBAN_INSTRUMENTED__?: true;\r\n        __RIBBAN_LOADER__?: true;\r\n    };\r\n    onunhandledrejection?: {\r\n        (event: unknown): boolean;\r\n        __RIBBAN_INSTRUMENTED__?: true;\r\n        __RIBBAN_LOADER__?: true;\r\n    };\r\n    RIBBAN_ENVIRONMENT?: string;\r\n    RIBBAN_DSN?: string;\r\n    RIBBAN_RELEASE?: {\r\n        id?: string;\r\n    };\r\n    /**\r\n     * Debug IDs are indirectly injected by Ribban CLI or bundler plugins to directly reference a particular source map\r\n     * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\r\n     * file.\r\n     */\r\n    _ribbanDebugIds?: Record<string, string>;\r\n    __RIBBAN__: {\r\n        hub: any;\r\n        logger: any;\r\n        extensions?: {\r\n          /** Extension methods for the hub, which are bound to the current Hub instance */\r\n          // eslint-disable-next-line @typescript-eslint/ban-types\r\n          [key: string]: Function;\r\n        };\r\n        globalScope: Scope | undefined;\r\n        defaultCurrentScope: Scope | undefined;\r\n        defaultIsolationScope: Scope | undefined;\r\n        /** Overwrites TextEncoder used in `@ribban/utils`, need for `react-native@0.73` and older */\r\n        encodePolyfill?: (input: string) => Uint8Array;\r\n        /** Overwrites TextDecoder used in `@ribban/utils`, need for `react-native@0.73` and older */\r\n        decodePolyfill?: (input: Uint8Array) => string;\r\n    };\r\n\r\n    /**\r\n     * Raw module metadata that is injected by bundler plugins.\r\n     *\r\n     * Keys are `error.stack` strings, values are the metadata.\r\n     */\r\n    _ribbanModuleMetadata?: Record<string, any>;\r\n    _ribbanEsmLoaderHookRegistered?: boolean;\r\n}\r\n\r\nexport const GLOBAL_OBJ = globalThis as unknown as InternalGlobal;\r\n\r\nexport function getGlobalSingleton<T>(name: keyof InternalGlobal['__RIBBAN__'], creator: () => T, obj?: unknown): T {\r\n    const gbl = (obj || GLOBAL_OBJ) as InternalGlobal;\r\n\r\n    const __RIBBAN__ = (gbl.__RIBBAN__ = gbl.__RIBBAN__ || {\r\n        hub: undefined,\r\n        logger: undefined,\r\n        globalScope: undefined,\r\n        defaultCurrentScope: undefined,\r\n        defaultIsolationScope: undefined,\r\n    });\r\n\r\n    const singleton = __RIBBAN__[name] || (__RIBBAN__[name] = creator());\r\n    return singleton;\r\n}"],"names":[],"mappings":"AAqDO,MAAM,UAAW,GAAE,UAAW,EAAA;;AAE9B,SAAS,kBAAkB,CAAI,IAAI,EAAsC,OAAO,EAAW,GAAG,EAAe;AACpH,IAAI,MAAM,GAAI,IAAU,UAAU,CAAE,EAAA;;AAEpC,IAAI,MAAM,UAAW,IAAG,GAAG,CAAC,UAAA,GAAa,GAAG,CAAC,UAAA,IAAc;AAC3D,QAAQ,GAAG,EAAE,SAAS;AACtB,QAAQ,MAAM,EAAE,SAAS;AACzB,QAAQ,WAAW,EAAE,SAAS;AAC9B,QAAQ,mBAAmB,EAAE,SAAS;AACtC,QAAQ,qBAAqB,EAAE,SAAS;AACxC,KAAK,CAAC,CAAA;;AAEN,IAAI,MAAM,SAAU,GAAE,UAAU,CAAC,IAAI,CAAE,KAAI,UAAU,CAAC,IAAI,CAAA,GAAI,OAAO,EAAE,CAAC,CAAA;AACxE,IAAI,OAAO,SAAS,CAAA;AACpB;;;;"}