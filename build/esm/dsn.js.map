{"version":3,"file":"dsn.js","sources":["../../src/dsn.ts"],"sourcesContent":["import { consoleSandbox, logger } from \"./utils/logger\";\r\n\r\nexport type DsnProtocol = 'http' | 'https';\r\n\r\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\r\n\r\nexport interface HostComponent {\r\n    protocol: DsnProtocol;\r\n    publicKey?: string;\r\n    pass?: string; /* Deprected / Optional */\r\n    // Hostname till denna Ribban Log Instance\r\n    host: string;\r\n    // Port\r\n    port: string;\r\n    // Sub path\r\n    path?: string;\r\n    // ID till projektet\r\n    projectId: string;\r\n}\r\n\r\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\r\n    return protocol === 'http' || protocol === 'https';\r\n}\r\n  \r\n\r\nexport function dsnToString(dsn: HostComponent, withPassword: boolean = false): string {\r\n    const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\r\n    return (\r\n      `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\r\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\r\n    );\r\n}\r\n\r\nexport function dsnFromString(str: string): HostComponent | undefined {\r\n    const match = DSN_REGEX.exec(str);\r\n  \r\n    if (!match) {\r\n        // This should be logged to the console\r\n        consoleSandbox(() => {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`Invalid Ribban Dsn: ${str}`);\r\n        });\r\n\r\n        return undefined;\r\n    }\r\n  \r\n    const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\r\n    let path = '';\r\n    let projectId = lastPath;\r\n  \r\n    const split = projectId.split('/');\r\n    if (split.length > 1) {\r\n        path = split.slice(0, -1).join('/');\r\n        projectId = split.pop() as string;\r\n    }\r\n  \r\n    if (projectId) {\r\n        const projectMatch = projectId.match(/^\\d+/);\r\n        if (projectMatch) {\r\n            projectId = projectMatch[0];\r\n        }\r\n    }\r\n  \r\n    return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\r\n}\r\n\r\nfunction dsnFromComponents(components: HostComponent): HostComponent {\r\n    return {\r\n      protocol: components.protocol,\r\n      publicKey: components.publicKey || '',\r\n      pass: components.pass || '',\r\n      host: components.host,\r\n      port: components.port || '',\r\n      path: components.path || '',\r\n      projectId: components.projectId,\r\n    };\r\n}\r\n  \r\nfunction validateDsn(dsn: HostComponent): boolean {\r\n    const { port, projectId, protocol } = dsn;\r\n  \r\n    const requiredComponents: ReadonlyArray<keyof HostComponent> = ['protocol', 'publicKey', 'host', 'projectId'];\r\n    const hasMissingRequiredComponent = requiredComponents.find(component => {\r\n        if (!dsn[component]) {\r\n            logger.error(`Invalid Ribban Dsn: ${component} missing`);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    });\r\n  \r\n    if (hasMissingRequiredComponent) {\r\n        return false;\r\n    }\r\n  \r\n    if (!projectId.match(/^\\d+$/)) {\r\n        logger.error(`Invalid Ribban Dsn: Invalid projectId ${projectId}`);\r\n        return false;\r\n    }\r\n  \r\n    if (!isValidProtocol(protocol)) {\r\n        logger.error(`Invalid Ribban Dsn: Invalid protocol ${protocol}`);\r\n        return false;\r\n    }\r\n  \r\n    if (port && isNaN(parseInt(port, 10))) {\r\n        logger.error(`Invalid Ribban Dsn: Invalid port ${port}`);\r\n        return false;\r\n    }\r\n  \r\n    return true;\r\n}\r\n  \r\n\r\nexport function createDSN(from: string | HostComponent): HostComponent | undefined {\r\n    const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\r\n    if (!components || !validateDsn(components)) {\r\n        return undefined;\r\n    }\r\n\r\n    return components;\r\n}"],"names":[],"mappings":"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"}