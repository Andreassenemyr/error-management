{"version":3,"file":"node-stack-trace.js","sources":["../../../../src/node/utils/node-stack-trace.ts"],"sourcesContent":["import { GetModuleFn } from \"../../api\";\r\nimport { StackLineParser, StackLineParserFn, UNKNOWN_FUNCTION } from \"../../types/stacktrace\";\r\n\r\nexport function filenameIsInApp(filename: string, isNative: boolean = false): boolean {\r\n    const isInternal =\r\n        isNative ||\r\n        (filename &&\r\n            // It's not internal if it's an absolute linux path\r\n            !filename.startsWith('/') &&\r\n            // It's not internal if it's an absolute windows path\r\n            !filename.match(/^[A-Z]:/) &&\r\n            // It's not internal if the path is starting with a dot\r\n            !filename.startsWith('.') &&\r\n            // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\r\n            !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\r\n\r\n    // in_app is all that's not an internal Node function or a module within node_modules\r\n    // note that isNative appears to return true even for node core libraries\r\n    // see https://github.com/getsentry/raven-node/issues/176\r\n\r\n    return !isInternal && filename !== undefined && !filename.includes('node_modules/');\r\n}\r\n\r\nexport function node(getModule?: GetModuleFn): StackLineParserFn {\r\n    const FILENAME_MATCH = /^\\s*[-]{4,}$/;\r\n    const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\r\n\r\n    // eslint-disable-next-line complexity\r\n    return (line: string) => {\r\n        const lineMatch = line.match(FULL_MATCH);\r\n\r\n        if (lineMatch) {\r\n            let object: string | undefined;\r\n            let method: string | undefined;\r\n            let functionName: string | undefined;\r\n            let typeName: string | undefined;\r\n            let methodName: string | undefined;\r\n\r\n            if (lineMatch[1]) {\r\n                functionName = lineMatch[1];\r\n\r\n                let methodStart = functionName.lastIndexOf('.');\r\n                if (functionName[methodStart - 1] === '.') {\r\n                    methodStart--;\r\n                }\r\n\r\n                if (methodStart > 0) {\r\n                    object = functionName.slice(0, methodStart);\r\n                    method = functionName.slice(methodStart + 1);\r\n                    const objectEnd = object.indexOf('.Module');\r\n                    if (objectEnd > 0) {\r\n                        functionName = functionName.slice(objectEnd + 1);\r\n                        object = object.slice(0, objectEnd);\r\n                    }\r\n                }\r\n                typeName = undefined;\r\n            }\r\n\r\n            if (method) {\r\n                typeName = object;\r\n                methodName = method;\r\n            }\r\n\r\n            if (method === '<anonymous>') {\r\n                methodName = undefined;\r\n                functionName = undefined;\r\n            }\r\n\r\n            if (functionName === undefined) {\r\n                methodName = methodName || UNKNOWN_FUNCTION;\r\n                functionName = typeName ? `${typeName}.${methodName}` : methodName;\r\n            }\r\n\r\n            let filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\r\n            const isNative = lineMatch[5] === 'native';\r\n\r\n            // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\r\n            if (filename && filename.match(/\\/[A-Z]:/)) {\r\n                filename = filename.slice(1);\r\n            }\r\n\r\n            if (!filename && lineMatch[5] && !isNative) {\r\n                filename = lineMatch[5];\r\n            }\r\n\r\n            return {\r\n                filename,\r\n                module: getModule ? getModule(filename) : undefined,\r\n                function: functionName,\r\n                lineno: parseInt(lineMatch[3], 10) || undefined,\r\n                colno: parseInt(lineMatch[4], 10) || undefined,\r\n                in_app: filenameIsInApp(filename, isNative),\r\n            };\r\n        }\r\n\r\n        if (line.match(FILENAME_MATCH)) {\r\n            return {\r\n                filename: line,\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    };\r\n}\r\n\r\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\r\n    return [90, node(getModule)]\r\n}"],"names":[],"mappings":"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"}