{"version":3,"file":"misc.js","sources":["../../../../../../src/utils/misc.ts"],"sourcesContent":["import { Event } from \"../types\";\nimport { Exception } from \"../types/exception\";\nimport { Mechanism } from \"../types/mechanism\";\nimport { logger } from \"./logger\";\nimport { addNonEnumerableProperty, isRegExp, isString } from \"./object\";\n\nexport function checkOrSetAlreadyCaught(exception: unknown) {\n    if (exception && (exception as any).__ribban_captured__) {\n        return true;\n    };\n\n    try {\n        addNonEnumerableProperty(exception as { [key: string]: unknown }, '__ribban_captured__', true)\n    } catch (error) {\n\n    };\n\n    return false;\n}\n\nexport function isMatchingPattern(\n    value: string,\n    pattern: RegExp | string,\n    requireExactStringMatch: boolean = false,\n): boolean {\n    if (!isString(value)) {\n        return false;\n    }\n\n    if (isRegExp(pattern)) {\n        return pattern.test(value);\n    }\n    \n    if (isString(pattern)) {\n        return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n\n    return false;\n}\n\n\nexport function stringMatchesSomePattern(\n    testString: string,\n    patterns: Array<string | RegExp> = [],\n    requireExactStringMatch: boolean = false,\n): boolean {\n    return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n\nexport function parseSampleRate(sampleRate: unknown): number | undefined {\n    if (typeof sampleRate === 'boolean') {\n        return Number(sampleRate);\n    }\n\n    const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n    if (typeof rate !== 'number' || isNaN(rate)) {\n        logger.warn(\n            `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n                sampleRate,\n            )} of type ${JSON.stringify(typeof sampleRate)}.`,\n        );\n\n        return undefined;\n    }\n\n    if (rate < 0 || rate > 1) {\n        logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n        return undefined;\n    }\n\n    return rate;\n}\n\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n    const exception = (event.exception = event.exception || {});\n    const values = (exception.values = exception.values || []);\n    const firstException = (values[0] = values[0] || {});\n    if (!firstException.value) {\n        firstException.value = value || '';\n    }\n    if (!firstException.type) {\n        firstException.type = type || 'Error';\n    }\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n        return;\n    }\n\n    const defaultMechanism = { type: 'generic', handled: true };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n    if (newMechanism && 'data' in newMechanism) {\n        const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n        firstException.mechanism.data = mergedData;\n    }\n}\n"],"names":["isString","isRegExp"],"mappings":";;;;AAoBO,SAAS,iBAAiB;AACjC,IAAI,KAAK;AACT,IAAI,OAAO;AACX,IAAI,uBAAuB,GAAY,KAAK;AAC5C,EAAW;AACX,IAAI,IAAI,CAACA,eAAQ,CAAC,KAAK,CAAC,EAAE;AAC1B,QAAQ,OAAO,KAAK,CAAA;AACpB,KAAI;AACJ;AACA,IAAI,IAAIC,eAAQ,CAAC,OAAO,CAAC,EAAE;AAC3B,QAAQ,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAClC,KAAI;;AAEJ,IAAI,IAAID,eAAQ,CAAC,OAAO,CAAC,EAAE;AAC3B,QAAQ,OAAO,uBAAA,GAA0B,KAAA,KAAU,OAAA,GAAU,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;AACpF,KAAI;AACJ;AACA,IAAI,OAAO,KAAK,CAAA;AAChB,CAAA;;AAGO,SAAS,wBAAwB;AACxC,IAAI,UAAU;AACd,IAAI,QAAQ,GAA2B,EAAE;AACzC,IAAI,uBAAuB,GAAY,KAAK;AAC5C,EAAW;AACX,IAAI,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAQ,IAAG,iBAAiB,CAAC,UAAU,EAAE,OAAO,EAAE,uBAAuB,CAAC,CAAC,CAAA;AACpG;;;;;"}