{"version":3,"file":"stack-parsers.js","sources":["../../src/stack-parsers.ts"],"sourcesContent":["import { StackFrame } from \"./types/stackframe\";\r\nimport { StackLineParser, StackLineParserFn, UNKNOWN_FUNCTION, createStackParser } from \"./types/stacktrace\";\r\n\r\nconst OPERA10_PRIORITY = 10;\r\nconst OPERA11_PRIORITY = 20;\r\nconst CHROME_PRIORITY = 30;\r\nconst WINJS_PRIORITY = 40;\r\nconst GECKO_PRIORITY = 50;\r\n\r\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\r\n  const frame: StackFrame = {\r\n    filename,\r\n    function: func === '<anonymous>' ? UNKNOWN_FUNCTION : func,\r\n    in_app: true, // All browser frames are considered in_app\r\n  };\r\n\r\n  if (lineno !== undefined) {\r\n    frame.lineno = lineno;\r\n  }\r\n\r\n  if (colno !== undefined) {\r\n    frame.colno = colno;\r\n  }\r\n\r\n  return frame;\r\n}\r\n\r\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\r\nconst chromeRegex =\r\n  /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\r\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\r\n\r\n// We cannot call this variable `chrome` because it can conflict with global `chrome` variable in certain environments\r\n// See: https://github.com/getsentry/sentry-javascript/issues/6880\r\nconst chromeStackParserFn: StackLineParserFn = line => {\r\n  const parts = chromeRegex.exec(line);\r\n\r\n  if (parts) {\r\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\r\n\r\n    if (isEval) {\r\n      const subMatch = chromeEvalRegex.exec(parts[2]);\r\n\r\n      if (subMatch) {\r\n        // throw out eval line/column and use top-most line/column number\r\n        parts[2] = subMatch[1]; // url\r\n        parts[3] = subMatch[2]; // line\r\n        parts[4] = subMatch[3]; // column\r\n      }\r\n    }\r\n\r\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\r\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\r\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\r\n\r\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chromeStackParserFn];\r\n\r\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\r\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\r\n// We need this specific case for now because we want no other regex to match.\r\nconst geckoREgex =\r\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\r\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\r\n\r\nconst gecko: StackLineParserFn = line => {\r\n  const parts = geckoREgex.exec(line);\r\n\r\n  if (parts) {\r\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\r\n    if (isEval) {\r\n      const subMatch = geckoEvalRegex.exec(parts[3]);\r\n\r\n      if (subMatch) {\r\n        // throw out eval line/column and use top-most line number\r\n        parts[1] = parts[1] || 'eval';\r\n        parts[3] = subMatch[1];\r\n        parts[4] = subMatch[2];\r\n        parts[5] = ''; // no column when eval\r\n      }\r\n    }\r\n\r\n    let filename = parts[3];\r\n    let func = parts[1] || UNKNOWN_FUNCTION;\r\n    [func, filename] = extractSafariExtensionDetails(func, filename);\r\n\r\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko];\r\n\r\nconst winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\r\n\r\nconst winjs: StackLineParserFn = line => {\r\n  const parts = winjsRegex.exec(line);\r\n\r\n  return parts\r\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\r\n    : undefined;\r\n};\r\n\r\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs];\r\n\r\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\r\n\r\nconst opera10: StackLineParserFn = line => {\r\n  const parts = opera10Regex.exec(line);\r\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\r\n};\r\n\r\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10];\r\n\r\nconst opera11Regex =\r\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\r\n\r\nconst opera11: StackLineParserFn = line => {\r\n  const parts = opera11Regex.exec(line);\r\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\r\n};\r\n\r\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11];\r\n\r\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser];\r\n\r\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers);\r\n\r\n/**\r\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\r\n * What it means, is that instead of format like:\r\n *\r\n * Error: wat\r\n *   at function@url:row:col\r\n *   at function@url:row:col\r\n *   at function@url:row:col\r\n *\r\n * it produces something like:\r\n *\r\n *   function@url:row:col\r\n *   function@url:row:col\r\n *   function@url:row:col\r\n *\r\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\r\n * This function is extracted so that we can use it in both places without duplicating the logic.\r\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\r\n * and fix this case seems like an impossible, or at least way too time-consuming task.\r\n */\r\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\r\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\r\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\r\n\r\n  return isSafariExtension || isSafariWebExtension\r\n    ? [\r\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\r\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\r\n      ]\r\n    : [func, filename];\r\n};"],"names":["UNKNOWN_FUNCTION","createStackParser"],"mappings":";;;;AAKA,MAAM,eAAA,GAAkB,EAAE,CAAA;AAE1B,MAAM,cAAA,GAAiB,EAAE,CAAA;;AAEzB,SAAS,WAAW,CAAC,QAAQ,EAAU,IAAI,EAAU,MAAM,EAAW,KAAK,EAAuB;AAClG,EAAE,MAAM,KAAK,GAAe;AAC5B,IAAI,QAAQ;AACZ,IAAI,QAAQ,EAAE,IAAK,KAAI,gBAAgBA,2BAAA,GAAmB,IAAI;AAC9D,IAAI,MAAM,EAAE,IAAI;AAChB,GAAG,CAAA;;AAEH,EAAE,IAAI,MAAO,KAAI,SAAS,EAAE;AAC5B,IAAI,KAAK,CAAC,MAAO,GAAE,MAAM,CAAA;AACzB,GAAE;;AAEF,EAAE,IAAI,KAAM,KAAI,SAAS,EAAE;AAC3B,IAAI,KAAK,CAAC,KAAM,GAAE,KAAK,CAAA;AACvB,GAAE;;AAEF,EAAE,OAAO,KAAK,CAAA;AACd,CAAA;;AAEA;AACA,MAAM,WAAY;AAClB,EAAE,4IAA4I,CAAA;AAC9I,MAAM,eAAA,GAAkB,+BAA+B,CAAA;;AAEvD;AACA;AACA,MAAM,mBAAmB,GAAsB,IAAA,IAAQ;AACvD,EAAE,MAAM,QAAQ,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;AAEtC,EAAE,IAAI,KAAK,EAAE;AACb,IAAI,MAAM,MAAO,GAAE,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAA,KAAM,CAAC,CAAA;;AAE7D,IAAI,IAAI,MAAM,EAAE;AAChB,MAAM,MAAM,QAAS,GAAE,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;;AAErD,MAAM,IAAI,QAAQ,EAAE;AACpB;AACA,QAAQ,KAAK,CAAC,CAAC,CAAA,GAAI,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC9B,QAAQ,KAAK,CAAC,CAAC,CAAA,GAAI,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC9B,QAAQ,KAAK,CAAC,CAAC,CAAA,GAAI,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC9B,OAAM;AACN,KAAI;;AAEJ;AACA;AACA,IAAI,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAE,GAAE,6BAA6B,CAAC,KAAK,CAAC,CAAC,CAAA,IAAKA,2BAAgB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;;AAElG,IAAI,OAAO,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA,GAAI,CAAC,KAAK,CAAC,CAAC,CAAE,GAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAE,GAAE,CAAC,KAAK,CAAC,CAAC,CAAE,GAAE,SAAS,CAAC,CAAA;AAC1G,GAAE;;AAEF,EAAE,OAAM;AACR,CAAC,CAAA;;AAEM,MAAM,qBAAqB,GAAoB,CAAC,eAAe,EAAE,mBAAmB,EAAC;;AAE5F;AACA;AACA;AACA,MAAM,UAAW;AACjB,EAAE,sIAAsI,CAAA;AACxI,MAAM,cAAA,GAAiB,+CAA+C,CAAA;;AAEtE,MAAM,KAAK,GAAsB,IAAA,IAAQ;AACzC,EAAE,MAAM,QAAQ,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;AAErC,EAAE,IAAI,KAAK,EAAE;AACb,IAAI,MAAM,MAAO,GAAE,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAE,GAAE,CAAC,CAAC,CAAA;AAC/D,IAAI,IAAI,MAAM,EAAE;AAChB,MAAM,MAAM,QAAS,GAAE,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;;AAEpD,MAAM,IAAI,QAAQ,EAAE;AACpB;AACA,QAAQ,KAAK,CAAC,CAAC,CAAE,GAAE,KAAK,CAAC,CAAC,CAAE,IAAG,MAAM,CAAA;AACrC,QAAQ,KAAK,CAAC,CAAC,CAAA,GAAI,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC9B,QAAQ,KAAK,CAAC,CAAC,CAAA,GAAI,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC9B,QAAQ,KAAK,CAAC,CAAC,CAAA,GAAI,EAAE,CAAA;AACrB,OAAM;AACN,KAAI;;AAEJ,IAAI,IAAI,QAAS,GAAE,KAAK,CAAC,CAAC,CAAC,CAAA;AAC3B,IAAI,IAAI,OAAO,KAAK,CAAC,CAAC,CAAA,IAAKA,2BAAgB,CAAA;AAC3C,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAA,GAAI,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;;AAEpE,IAAI,OAAO,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA,GAAI,CAAC,KAAK,CAAC,CAAC,CAAE,GAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAE,GAAE,CAAC,KAAK,CAAC,CAAC,CAAE,GAAE,SAAS,CAAC,CAAA;AAC1G,GAAE;;AAEF,EAAE,OAAM;AACR,CAAC,CAAA;;AAEM,MAAM,oBAAoB,GAAoB,CAAC,cAAc,EAAE,KAAK,EAAC;;MAiC/D,uBAAwB,GAAE,CAAC,qBAAqB,EAAE,oBAAoB,EAAC;;MAEvE,kBAAmB,GAAEC,4BAAiB,CAAC,GAAG,uBAAuB,EAAC;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gCAAgC,CAAC,IAAI,EAAU,QAAQ,KAA+B;AAC5F,EAAE,MAAM,iBAAkB,GAAE,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAA,KAAM,CAAC,CAAC,CAAA;AACnE,EAAE,MAAM,oBAAqB,GAAE,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAA,KAAM,CAAC,CAAC,CAAA;;AAE1E,EAAE,OAAO,qBAAqB,oBAAA;AAC9B,MAAM;AACN,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAE,KAAI,CAAC,CAAE,GAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA,GAAID,2BAAgB;AACxE,QAAQ,oBAAoB,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAA,GAAA,CAAA,qBAAA,EAAA,QAAA,CAAA,CAAA;AACA,OAAA;AACA,MAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACA,CAAA;;;;;;;"}