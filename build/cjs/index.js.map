{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { Client } from \"./client\";\r\nimport { getCurrentScope } from \"./current-scopes\";\r\nexport { init } from \"./init\";\r\nimport { RequestSession } from \"./session\";\r\nimport { Event, EventHint, SeverityLevel } from \"./types\";\r\nimport { parseEventHintOrCaptureContext } from \"./utils/prepare-event\";\r\nimport { withRibbanConfig } from \"./config/withRibbanConfig\";\r\n\r\nexport type CaptureContext = Scope | Partial<ScopeContext> | ((scope: Scope) => Scope);\r\n\r\nexport type ExclusiveEventHintOrCaptureContext = \r\n    | (CaptureContext & Partial<{ [key in keyof EventHint]: never }>)\r\n    | (EventHint & Partial<{ [key in keyof ScopeContext]: never }>);\r\n\r\nexport type Extra = unknown;\r\nexport type Extras = Record<string, Extra>;\r\n\r\nexport interface ScopeContext {\r\n    level: 'fatal' | 'error' | 'warning' | 'info' | 'debug';\r\n    extra: Extras;\r\n    tags: { [key: string]: string };\r\n    fingerprint: string[];\r\n    requestSession: RequestSession;\r\n};\r\n\r\nexport interface Scope {\r\n    addScopeListener(callback: (scope: Scope) => void): void;\r\n\r\n    setTags(tags: { [key: string]: string }): this;\r\n\r\n    setTag(key: string, value: string): this;\r\n\r\n    setExtras(extras: Extras): this;\r\n\r\n    setExtra(key: string, extra: Extra): this;\r\n\r\n    setLevel(level: 'fatal' | 'error' | 'warning' | 'info' | 'debug'): this;\r\n\r\n    clear(): this;\r\n\r\n    update(captureContext?: CaptureContext);\r\n\r\n    /**\r\n     * Returns the `RequestSession` if there is one\r\n     */\r\n    getRequestSession(): RequestSession | undefined;\r\n\r\n    /**\r\n     * Sets the `RequestSession` on the scope\r\n     */\r\n    setRequestSession(requestSession?: RequestSession): this;\r\n\r\n    captureException(exception: unknown, hint?: EventHint): string;\r\n\r\n    captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string;\r\n\r\n    captureEvent(event: Event, hint?: EventHint): string;\r\n\r\n    getClient<C extends Client>(): C | undefined;\r\n\r\n    setClient(client: Client | undefined): void;\r\n\r\n    clone(): Scope;\r\n}\r\n\r\nexport function captureException(\r\n    exception: any,\r\n    hint?: ExclusiveEventHintOrCaptureContext,\r\n) {    \r\n    return getCurrentScope().captureException(exception, parseEventHintOrCaptureContext(hint));\r\n}\r\n\r\nexport function captureEvent(event: Event, hint?: EventHint) {\r\n    return getCurrentScope().captureEvent(event, hint);\r\n}\r\n\r\nexport function captureMessage(\r\n    message: string,\r\n    level?: SeverityLevel,\r\n    hint?: ExclusiveEventHintOrCaptureContext,\r\n) {\r\n    return getCurrentScope().captureMessage(message, level, parseEventHintOrCaptureContext(hint));\r\n}   "],"names":["getCurrentScope","parseEventHintOrCaptureContext"],"mappings":";;;;;;;;;AAiEO,SAAS,gBAAgB;AAChC,IAAI,SAAS;AACb,IAAI,IAAI;AACR,EAAE;AACF,IAAI,OAAOA,6BAAe,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAEC,2CAA8B,CAAC,IAAI,CAAC,CAAC,CAAA;AAC9F,CAAA;;AAEO,SAAS,YAAY,CAAC,KAAK,EAAS,IAAI,EAAc;AAC7D,IAAI,OAAOD,6BAAe,EAAE,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;AACtD,CAAA;;AAEO,SAAS,cAAc;AAC9B,IAAI,OAAO;AACX,IAAI,KAAK;AACT,IAAI,IAAI;AACR,EAAE;AACF,IAAI,OAAOA,6BAAe,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,EAAEC,2CAA8B,CAAC,IAAI,CAAC,CAAC,CAAA;AACjG;;;;;;"}