{"version":3,"file":"async-context.js","sources":["../../src/async-context.ts"],"sourcesContent":["import { Scope } from \"./index\";\nimport { Carrier, getMainCarrier, getRibbanCarrier } from \"./carrier\";\nimport { Client } from \"./client\";\nimport { getDefaultCurrentScope, getDefaultIsolationScope } from \"./current-scopes\";\nimport { Scope as ScopeClass } from \"./scope\"; \nimport { isThenable } from \"./transport/syncpromise\";\n\nexport interface AsyncContextStrategy {\n    /**\n     * Fork the isolation scope inside of the provided callback.\n     */\n    withIsolationScope: <T>(callback: (isolationScope: Scope) => T) => T;\n  \n    /**\n     * Fork the current scope inside of the provided callback.\n     */\n    withScope: <T>(callback: (isolationScope: Scope) => T) => T;\n  \n    /**\n     * Set the provided scope as the current scope inside of the provided callback.\n     */\n    withSetScope: <T>(scope: Scope, callback: (scope: Scope) => T) => T;\n  \n    /**\n     * Set the provided isolation as the current isolation scope inside of the provided callback.\n     */\n    withSetIsolationScope: <T>(isolationScope: Scope, callback: (isolationScope: Scope) => T) => T;\n  \n    /**\n     * Get the currently active scope.\n     */\n    getCurrentScope: () => Scope;\n  \n    /**\n     * Get the currently active isolation scope.\n     */\n    getIsolationScope: () => Scope;\n\n}\n\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n    // Get main carrier (global for every environment)\n    const registry = getMainCarrier();\n    const ribbanCarrier = getRibbanCarrier(registry);\n    ribbanCarrier.acs = strategy;\n}\n\ninterface Layer {\n    client?: Client;\n    scope: Scope;\n}\n  \n  /**\n   * Get the current async context strategy.\n   * If none has been setup, the default will be used.\n   */\nexport function getAsyncContextStrategy(carrier: Carrier): AsyncContextStrategy {\n    const ribban = getRibbanCarrier(carrier);\n  \n    if (ribban.acs) {\n      return ribban.acs;\n    }\n  \n    // Otherwise, use the default one (stack)\n    return getStackAsyncContextStrategy();\n}\n\nexport class AsyncContextStack {\n    private readonly _stack: Layer[];\n    private _isolationScope: Scope;\n  \n    public constructor(scope?: Scope, isolationScope?: Scope) {\n      let assignedScope;\n      if (!scope) {\n        assignedScope = new ScopeClass();\n      } else {\n        assignedScope = scope;\n      }\n  \n      let assignedIsolationScope;\n      if (!isolationScope) {\n        assignedIsolationScope = new ScopeClass();\n      } else {\n        assignedIsolationScope = isolationScope;\n      }\n  \n      this._stack = [{ scope: assignedScope }];\n      this._isolationScope = assignedIsolationScope;\n    }\n  \n    /**\n     * Fork a scope for the stack.\n     */\n    public withScope<T>(callback: (scope: Scope) => T): T {\n      const scope = this._pushScope();\n  \n      let maybePromiseResult: T;\n      try {\n        maybePromiseResult = callback(scope);\n      } catch (e) {\n        this._popScope();\n        throw e;\n      }\n  \n      if (isThenable(maybePromiseResult)) {\n        // @ts-expect-error - isThenable returns the wrong type\n        return maybePromiseResult.then(\n          res => {\n            this._popScope();\n            return res;\n          },\n          e => {\n            this._popScope();\n            throw e;\n          },\n        );\n      }\n  \n      this._popScope();\n      return maybePromiseResult;\n    }\n  \n    /**\n     * Get the client of the stack.\n     */\n    public getClient<C extends Client>(): C | undefined {\n      return this.getStackTop().client as C;\n    }\n  \n    /**\n     * Returns the scope of the top stack.\n     */\n    public getScope(): Scope {\n      return this.getStackTop().scope;\n    }\n  \n    /**\n     * Get the isolation scope for the stack.\n     */\n    public getIsolationScope(): Scope {\n      return this._isolationScope;\n    }\n  \n    /**\n     * Returns the scope stack for domains or the process.\n     */\n    public getStack(): Layer[] {\n      return this._stack;\n    }\n  \n    /**\n     * Returns the topmost scope layer in the order domain > local > process.\n     */\n    public getStackTop(): Layer {\n      return this._stack[this._stack.length - 1];\n    }\n  \n    /**\n     * Push a scope to the stack.\n     */\n    private _pushScope(): Scope {\n      // We want to clone the content of prev scope\n      const scope = this.getScope().clone();\n      this.getStack().push({\n        client: this.getClient(),\n        scope,\n      });\n      return scope;\n    }\n  \n    /**\n     * Pop a scope from the stack.\n     */\n    private _popScope(): boolean {\n      if (this.getStack().length <= 1) return false;\n      return !!this.getStack().pop();\n    }\n}\n\nfunction getAsyncContextStack(): AsyncContextStack {\n    const registry = getMainCarrier();\n  \n    // For now we continue to keep this as `hub` on the ACS,\n    // as e.g. the Loader Script relies on this.\n    // Eventually we may change this if/when we update the loader to not require this field anymore\n    // Related, we also write to `hub` in {@link ./../sdk.ts registerClientOnGlobalHub}\n    const ribban = getRibbanCarrier(registry) as { hub?: AsyncContextStack };\n  \n    if (ribban.hub) {\n      return ribban.hub;\n    }\n  \n    ribban.hub = new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope());\n    return ribban.hub;\n}\n\nfunction withScope<T>(callback: (scope: Scope) => T): T {\n    return getAsyncContextStack().withScope(callback);\n}\n  \nfunction withSetScope<T>(scope: Scope, callback: (scope: Scope) => T): T {\n    const hub = getAsyncContextStack() as AsyncContextStack;\n    return hub.withScope(() => {\n      hub.getStackTop().scope = scope;\n      return callback(scope);\n    });\n}\n\nfunction withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n    return getAsyncContextStack().withScope(() => {\n        return callback(getAsyncContextStack().getIsolationScope());\n    });\n} \n  \n\nexport function getStackAsyncContextStrategy(): AsyncContextStrategy {\n    return {\n        withIsolationScope,\n        withScope,\n        withSetScope,\n        withSetIsolationScope: <T>(_isolationScope: Scope, callback: (isolationScope: Scope) => T) => {\n          return withIsolationScope(callback);\n        },\n        getCurrentScope: () => getAsyncContextStack().getScope(),\n        getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n    };\n}"],"names":["carrier","getRibbanCarrier","scope","ScopeClass","isThenable","getMainCarrier","getDefaultCurrentScope","getDefaultIsolationScope"],"mappings":"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"}