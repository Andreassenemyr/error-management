{"version":3,"file":"current-scopes.js","sources":["../../src/current-scopes.ts"],"sourcesContent":["import { getGlobalSingleton } from \"./worldwide\";\r\nimport { Scope as ScopeClass } from \"./scope\";\r\nimport { Scope } from \"./index\";\r\nimport { getMainCarrier } from \"./carrier\";\r\nimport { getAsyncContextStrategy } from \"./async-context\";\r\nimport { Client } from \"./client\";\r\n\r\nexport function getDefaultCurrentScope(): Scope {\r\n    return getGlobalSingleton('defaultCurrentScope', () => new ScopeClass());\r\n}\r\n\r\nexport function getDefaultIsolationScope(): Scope {\r\n    return getGlobalSingleton('defaultIsolationScope', () => new ScopeClass());\r\n}\r\n\r\nexport function getClient<C extends Client>(): C | undefined {\r\n    return getCurrentScope().getClient<C>();\r\n}\r\n\r\nexport function getCurrentScope(): Scope {\r\n    const carrier = getMainCarrier();\r\n    const acs = getAsyncContextStrategy(carrier);\r\n    return acs.getCurrentScope();\r\n}\r\n\r\nexport function getIsolationScope(): Scope {\r\n    const carrier = getMainCarrier();\r\n    const acs = getAsyncContextStrategy(carrier);\r\n    return acs.getIsolationScope();\r\n};\r\n  \r\nexport function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T;\r\n\r\nexport function withIsolationScope<T>(isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T): T;\r\n\r\nexport function withIsolationScope<T>(\r\n    ...rest:\r\n      | [callback: (isolationScope: Scope) => T]\r\n      | [isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T]\r\n  ): T {\r\n    const carrier = getMainCarrier();\r\n    const acs = getAsyncContextStrategy(carrier);\r\n  \r\n    // If a scope is defined, we want to make this the active scope instead of the default one\r\n    if (rest.length === 2) {\r\n        const [isolationScope, callback] = rest;\r\n        \r\n        if (!isolationScope) {\r\n          return acs.withIsolationScope(callback);\r\n        }\r\n      \r\n        return acs.withSetIsolationScope(isolationScope, callback);\r\n    }\r\n  \r\n    return acs.withIsolationScope(rest[0]);\r\n}"],"names":["getGlobalSingleton","ScopeClass","carrier","getMainCarrier","getAsyncContextStrategy"],"mappings":";;;;;;;AAOO,SAAS,sBAAsB,GAAU;AAChD,IAAI,OAAOA,4BAAkB,CAAC,qBAAqB,EAAE,MAAM,IAAIC,WAAU,EAAE,CAAC,CAAA;AAC5E,CAAA;;AAEO,SAAS,wBAAwB,GAAU;AAClD,IAAI,OAAOD,4BAAkB,CAAC,uBAAuB,EAAE,MAAM,IAAIC,WAAU,EAAE,CAAC,CAAA;AAC9E,CAAA;;AAEO,SAAS,SAAS,GAAoC;AAC7D,IAAI,OAAO,eAAe,EAAE,CAAC,SAAS,EAAK,CAAA;AAC3C,CAAA;;AAEO,SAAS,eAAe,GAAU;AACzC,IAAI,MAAMC,SAAA,GAAUC,sBAAc,EAAE,CAAA;AACpC,IAAI,MAAM,GAAI,GAAEC,oCAAuB,CAACF,SAAO,CAAC,CAAA;AAChD,IAAI,OAAO,GAAG,CAAC,eAAe,EAAE,CAAA;AAChC,CAAA;;AAEO,SAAS,iBAAiB,GAAU;AAC3C,IAAI,MAAMA,SAAA,GAAUC,sBAAc,EAAE,CAAA;AACpC,IAAI,MAAM,GAAI,GAAEC,oCAAuB,CAACF,SAAO,CAAC,CAAA;AAChD,IAAI,OAAO,GAAG,CAAC,iBAAiB,EAAE,CAAA;AAClC;;;;;;;;"}