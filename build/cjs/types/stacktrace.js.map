{"version":3,"file":"stacktrace.js","sources":["../../../src/types/stacktrace.ts"],"sourcesContent":["import { StackFrame } from \"./stackframe\";\n\nexport interface Stacktrace {\n    frames?: StackFrame[];\n    frames_omitted?: [number, number];\n}\n\nexport type StackParser = (stack: string, skipFirstLines?: number, framesToPop?: number) => StackFrame[];\nexport type StackLineParserFn = (line: string) => StackFrame | undefined;\nexport type StackLineParser = [number, StackLineParserFn];\n\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n    if (Array.isArray(stackParser)) {\n        return createStackParser(...stackParser);\n    }\n    return stackParser;\n}\n  \nconst STACKTRACE_FRAME_LIMIT = 50;\nexport const UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n    const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n  \n    return (stack: string, skipFirstLines: number = 0, framesToPop: number = 0): StackFrame[] => {\n        const frames: StackFrame[] = [];\n        const lines = stack.split('\\n');\n        \n        for (let i = skipFirstLines; i < lines.length; i++) {\n            const line = lines[i];\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            if (line.length > 1024) {\n              continue;\n            }\n          \n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n          \n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n              continue;\n            }\n          \n            for (const parser of sortedParsers) {\n              const frame = parser(cleanedLine);\n\n              if (frame) {\n                frames.push(frame);\n                break;\n              }\n            }\n          \n            if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n              break;\n            }\n        }\n      \n        return stripRibbanFramesAndReverse(frames.slice(framesToPop));\n    };\n}\n\nexport function stripRibbanFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n    if (!stack.length) {\n        return [];\n    }\n  \n    const localStack = Array.from(stack);\n  \n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/ribbanWrapped/.test(localStack[localStack.length - 1].function || '')) {\n        localStack.pop();\n    }\n  \n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n  \n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n        localStack.pop();\n        \n        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Ribban syntheticException')`\n        // is produced within the hub itself, making it:\n        //\n        //   Ribban.captureException()\n        //   getCurrentHub().captureException()\n        //\n        // instead of just the top `Ribban` call itself.\n        // This forces us to possibly strip an additional frame in the exact same was as above.\n        if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n          localStack.pop();\n        }\n    }\n  \n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n        ...frame,\n        filename: frame.filename || localStack[localStack.length - 1].filename,\n        function: frame.function || UNKNOWN_FUNCTION,\n    }));\n}"],"names":[],"mappings":"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"}