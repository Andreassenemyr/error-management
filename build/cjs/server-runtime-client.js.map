{"version":3,"file":"server-runtime-client.js","sources":["../../src/server-runtime-client.ts"],"sourcesContent":["import { Scope } from \".\";\r\nimport { BaseClient } from \"./baseclient\";\r\nimport { eventFromClientUnknownInput, eventFromMessage, eventFromUnknownInput } from \"./client\";\r\nimport { getIsolationScope } from \"./current-scopes\";\r\nimport { ClientOptions } from \"./options\";\r\nimport { SessionFlusher } from \"./sessionflusher\";\r\nimport { BaseTransportOptions } from \"./transport\";\r\nimport { resolvedSyncPromise } from \"./transport/syncpromise\";\r\nimport { Event, EventHint, SeverityLevel } from \"./types\";\r\nimport { logger } from \"./utils/logger\";\r\nimport { ParameterizedString } from \"./utils/parameterize\";\r\n\r\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\r\n    platform?: string;\r\n    runtime?: { name: string; version?: string };\r\n    serverName?: string;\r\n}\r\n\r\n/**\r\n * The Sentry Server Runtime Client SDK.\r\n */\r\nexport class ServerRuntimeClient<O extends ClientOptions & ServerRuntimeClientOptions = ServerRuntimeClientOptions,> extends BaseClient<O> {\r\n    protected _sessionFlusher: SessionFlusher | undefined;\r\n\r\n    /**\r\n     * Creates a new Edge SDK instance.\r\n     * @param options Configuration options for this SDK.\r\n     */\r\n    public constructor(options: O) {\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\r\n        return resolvedSyncPromise(eventFromClientUnknownInput(this, this.options.stackParser, exception, hint));\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public eventFromMessage(\r\n        message: ParameterizedString,\r\n        level: SeverityLevel = 'info',\r\n        hint?: EventHint,\r\n    ): PromiseLike<Event> {\r\n        return resolvedSyncPromise(\r\n            eventFromMessage(this.options.stackParser, message, level, hint, this.options.attachStacktrace),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    public captureException(exception: any, hint?: EventHint, scope?: Scope): string {\r\n        // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\r\n        // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\r\n        // sent to the Server only when the `requestHandler` middleware is used\r\n        if (this.options.autoSessionTracking && this._sessionFlusher) {\r\n            const requestSession = getIsolationScope().getRequestSession();\r\n\r\n            // Necessary checks to ensure this is code block is executed only within a request\r\n            // Should override the status only if `requestSession.status` is `Ok`, which is its initial stage\r\n            if (requestSession && requestSession.status === 'ok') {\r\n                requestSession.status = 'errored';\r\n            }\r\n        }\r\n\r\n        return super.captureException(exception, hint, scope);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string {\r\n        // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\r\n        // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\r\n        // sent to the Server only when the `requestHandler` middleware is used\r\n        if (this.options.autoSessionTracking && this._sessionFlusher) {\r\n            const eventType = event.type || 'exception';\r\n            const isException =\r\n                eventType === 'exception' && event.exception && event.exception.values && event.exception.values.length > 0;\r\n\r\n            // If the event is of type Exception, then a request session should be captured\r\n            if (isException) {\r\n                const requestSession = getIsolationScope().getRequestSession();\r\n\r\n                // Ensure that this is happening within the bounds of a request, and make sure not to override\r\n                // Session Status if Errored / Crashed\r\n                if (requestSession && requestSession.status === 'ok') {\r\n                    requestSession.status = 'errored';\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.captureEvent(event, hint, scope);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @inheritdoc\r\n     */\r\n    public close(timeout?: number): PromiseLike<boolean> {\r\n        if (this._sessionFlusher) {\r\n            this._sessionFlusher.close();\r\n        }\r\n        return super.close(timeout);\r\n    }\r\n\r\n    /** Method that initialises an instance of SessionFlusher on Client */\r\n    public initSessionFlusher(): void {\r\n        const { environment } = this.options;\r\n\r\n        this._sessionFlusher = new SessionFlusher(this, {\r\n            environment,\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Method responsible for capturing/ending a request session by calling `incrementSessionStatusCount` to increment\r\n     * appropriate session aggregates bucket\r\n     */\r\n    protected _captureRequestSession(): void {\r\n        if (!this._sessionFlusher) {\r\n            logger.warn('Discarded request mode session because autoSessionTracking option was disabled');\r\n        } else {\r\n            this._sessionFlusher.incrementSessionStatusCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    protected _prepareEvent(\r\n        event: Event,\r\n        hint: EventHint,\r\n        scope?: Scope,\r\n        isolationScope?: Scope,\r\n    ): PromiseLike<Event | null> {\r\n        if (this.options.platform) {\r\n            event.platform = event.platform || this.options.platform;\r\n        }\r\n\r\n        if (this.options.runtime) {\r\n            event.contexts = {\r\n                ...event.contexts,\r\n                runtime: (event.contexts || {}).runtime || this.options.runtime,\r\n            };\r\n        }\r\n\r\n        if (this.options.serverName) {\r\n            event.server_name = event.server_name || this.options.serverName;\r\n        }\r\n\r\n        return super._prepareEvent(event, hint, scope, isolationScope);\r\n    }\r\n}"],"names":["BaseClient","resolvedSyncPromise","eventFromClientUnknownInput","eventFromMessage","getIsolationScope","SessionFlusher","logger"],"mappings":"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"}