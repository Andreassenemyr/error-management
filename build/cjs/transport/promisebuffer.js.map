{"version":3,"file":"promisebuffer.js","sources":["../../../src/transport/promisebuffer.ts"],"sourcesContent":["import { RibbanError } from \"../utils/error\";\nimport { SyncPromise, rejectedSyncPromise, resolvedSyncPromise } from \"./syncpromise\";\n\nexport interface PromiseBuffer<T> {\n    // exposes the internal array so tests can assert on the state of it.\n    // XXX: this really should not be public api.\n    $: Array<PromiseLike<T>>;\n    add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n    drain(timeout?: number): PromiseLike<boolean>;\n}\n  \n\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n    const buffer: Array<PromiseLike<T>> = [];\n  \n    function isReady(): boolean {\n      return limit === undefined || buffer.length < limit;\n    }\n  \n    /**\n     * Remove a promise from the queue.\n     *\n     * @param task Can be any PromiseLike<T>\n     * @returns Removed promise.\n     */\n    function remove(task: PromiseLike<T>): PromiseLike<T> {\n      return buffer.splice(buffer.indexOf(task), 1)[0];\n    }\n  \n    /**\n     * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n     *\n     * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n     *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n     *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n     *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n     *        limit check.\n     * @returns The original promise.\n     */\n    function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n        if (!isReady()) {\n            return rejectedSyncPromise(new RibbanError('Not adding Promise because buffer limit was reached.'));\n        }\n      \n        // start the task and add its promise to the queue\n        const task = taskProducer();\n        if (buffer.indexOf(task) === -1) {\n            buffer.push(task);\n        }\n\n        void task\n            .then(() => remove(task))\n            // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n            // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n            // have promises, so TS has to polyfill when down-compiling.)\n            .then(null, () =>\n              remove(task).then(null, () => {\n                // We have to add another catch here because `remove()` starts a new promise chain.\n              }),\n            );\n        return task;\n    }\n  \n    /**\n     * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n     *\n     * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n     * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n     * `true`.\n     * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n     * `false` otherwise\n     */\n    function drain(timeout?: number): PromiseLike<boolean> {\n        return new SyncPromise<boolean>((resolve, reject) => {\n            let counter = buffer.length;\n            \n            if (!counter) {\n                return resolve(true);\n            }\n          \n            // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n            const capturedSetTimeout = setTimeout(() => {\n                if (timeout && timeout > 0) {\n                    resolve(false);\n                }\n            }, timeout);\n          \n            // if all promises resolve in time, cancel the timer and resolve to `true`\n            buffer.forEach(item => {\n                void resolvedSyncPromise(item).then(() => {\n                    if (!--counter) {\n                        clearTimeout(capturedSetTimeout);\n                        resolve(true);\n                    }\n                }, reject);\n            });\n        });\n    }\n  \n    return {\n        $: buffer,\n        add,\n        drain,\n    };\n}"],"names":["rejectedSyncPromise","RibbanError","SyncPromise","resolvedSyncPromise"],"mappings":";;;;;AAYO,SAAS,iBAAiB,CAAI,KAAK,EAA6B;AACvE,IAAI,MAAM,MAAM,GAA0B,EAAE,CAAA;;AAE5C,IAAI,SAAS,OAAO,GAAY;AAChC,MAAM,OAAO,UAAU,SAAA,IAAa,MAAM,CAAC,MAAO,GAAE,KAAK,CAAA;AACzD,KAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,MAAM,CAAC,IAAI,EAAkC;AAC1D,MAAM,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACtD,KAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,GAAG,CAAC,YAAY,EAAwC;AACrE,QAAQ,IAAI,CAAC,OAAO,EAAE,EAAE;AACxB,YAAY,OAAOA,+BAAmB,CAAC,IAAIC,iBAAW,CAAC,sDAAsD,CAAC,CAAC,CAAA;AAC/G,SAAQ;;AAER;AACA,QAAQ,MAAM,IAAA,GAAO,YAAY,EAAE,CAAA;AACnC,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAE,KAAI,CAAC,CAAC,EAAE;AACzC,YAAY,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAC7B,SAAQ;AACR;AACA,QAAQ,KAAK,IAAA;AACb,aAAa,IAAI,CAAC,MAAM,MAAM,CAAC,IAAI,CAAC,CAAA;AACpC;AACA;AACA;AACA,aAAa,IAAI,CAAC,IAAI,EAAE;AACxB,cAAc,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM;AAC5C;AACA,eAAe,CAAC;AAChB,aAAa,CAAA;AACb,QAAQ,OAAO,IAAI,CAAA;AACnB,KAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,KAAK,CAAC,OAAO,EAAiC;AAC3D,QAAQ,OAAO,IAAIC,uBAAW,CAAU,CAAC,OAAO,EAAE,MAAM,KAAK;AAC7D,YAAY,IAAI,OAAA,GAAU,MAAM,CAAC,MAAM,CAAA;;AAEvC,YAAY,IAAI,CAAC,OAAO,EAAE;AAC1B,gBAAgB,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA;AACpC,aAAY;;AAEZ;AACA,YAAY,MAAM,kBAAmB,GAAE,UAAU,CAAC,MAAM;AACxD,gBAAgB,IAAI,OAAA,IAAW,OAAQ,GAAE,CAAC,EAAE;AAC5C,oBAAoB,OAAO,CAAC,KAAK,CAAC,CAAA;AAClC,iBAAgB;AAChB,aAAa,EAAE,OAAO,CAAC,CAAA;;AAEvB;AACA,YAAY,MAAM,CAAC,OAAO,CAAC,QAAQ;AACnC,gBAAgB,KAAKC,+BAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM;AAC1D,oBAAoB,IAAI,CAAC,EAAE,OAAO,EAAE;AACpC,wBAAwB,YAAY,CAAC,kBAAkB,CAAC,CAAA;AACxD,wBAAwB,OAAO,CAAC,IAAI,CAAC,CAAA;AACrC,qBAAoB;AACpB,iBAAiB,EAAE,MAAM,CAAC,CAAA;AAC1B,aAAa,CAAC,CAAA;AACd,SAAS,CAAC,CAAA;AACV,KAAI;;AAEJ,IAAI,OAAO;AACX,QAAQ,CAAC,EAAE,MAAM;AACjB,QAAQ,GAAG;AACX,QAAQ,KAAK;AACb,KAAK,CAAA;AACL;;;;"}