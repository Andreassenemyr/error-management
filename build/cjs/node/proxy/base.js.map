{"version":3,"file":"base.js","sources":["../../../../src/node/proxy/base.ts"],"sourcesContent":["import * as http from 'node:http';\r\nimport type * as net from \"node:net\";\r\nimport type { Duplex } from \"node:stream\";\r\nimport type * as tls from \"node:tls\";\r\n\r\nexport * from './helpers';\r\n\r\ninterface HttpConnectOpts extends net.TcpNetConnectOpts {\r\n    secureEndpoint: false;\r\n    protocol?: string;\r\n}\r\n\r\ninterface HttpsConnectOpts extends tls.ConnectionOptions {\r\n    secureEndpoint: true;\r\n    protocol?: string;\r\n    port: number;\r\n}\r\n\r\nexport type AgentConnectOpts = HttpConnectOpts | HttpsConnectOpts;\r\n\r\nconst INTERNAL = Symbol('AgentBaseInternalState');\r\n\r\ninterface InternalState {\r\n    defaultPort?: number;\r\n    protocol?: string;\r\n    currentSocket?: Duplex;\r\n}\r\n\r\nexport abstract class Agent extends http.Agent {\r\n    private [INTERNAL]: InternalState;\r\n\r\n    // Set by `http.Agent` - missing from `@types/node`\r\n    options!: Partial<net.TcpNetConnectOpts & tls.ConnectionOptions>;\r\n    keepAlive!: boolean;\r\n\r\n    constructor(opts?: http.AgentOptions) {\r\n        super(opts);\r\n        this[INTERNAL] = {};\r\n    }\r\n\r\n    abstract connect(\r\n        req: http.ClientRequest,\r\n        options: AgentConnectOpts,\r\n    ): Promise<Duplex | http.Agent> | Duplex | http.Agent;\r\n\r\n    /**\r\n     * Determine whether this is an `http` or `https` request.\r\n     */\r\n    isSecureEndpoint(options?: AgentConnectOpts): boolean {\r\n        if (options) {\r\n            // First check the `secureEndpoint` property explicitly, since this\r\n            // means that a parent `Agent` is \"passing through\" to this instance.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\r\n            if (typeof (options as any).secureEndpoint === 'boolean') {\r\n                return options.secureEndpoint;\r\n            }\r\n\r\n            // If no explicit `secure` endpoint, check if `protocol` property is\r\n            // set. This will usually be the case since using a full string URL\r\n            // or `URL` instance should be the most common usage.\r\n            if (typeof options.protocol === 'string') {\r\n                return options.protocol === 'https:';\r\n            }\r\n        }\r\n\r\n        // Finally, if no `protocol` property was set, then fall back to\r\n        // checking the stack trace of the current call stack, and try to\r\n        // detect the \"https\" module.\r\n        const { stack } = new Error();\r\n        if (typeof stack !== 'string') return false;\r\n        return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\r\n    }\r\n\r\n    createSocket(req: http.ClientRequest, options: AgentConnectOpts, cb: (err: Error | null, s?: Duplex) => void): void {\r\n        const connectOpts = {\r\n            ...options,\r\n            secureEndpoint: this.isSecureEndpoint(options),\r\n        };\r\n        Promise.resolve()\r\n            .then(() => this.connect(req, connectOpts))\r\n            .then(socket => {\r\n                if (socket instanceof http.Agent) {\r\n                    // @ts-expect-error `addRequest()` isn't defined in `@types/node`\r\n                    return socket.addRequest(req, connectOpts);\r\n                }\r\n                this[INTERNAL].currentSocket = socket;\r\n                // @ts-expect-error `createSocket()` isn't defined in `@types/node`\r\n                super.createSocket(req, options, cb);\r\n            }, cb);\r\n    }\r\n\r\n    createConnection(): Duplex {\r\n        const socket = this[INTERNAL].currentSocket;\r\n        this[INTERNAL].currentSocket = undefined;\r\n        if (!socket) {\r\n            throw new Error('No socket was returned in the `connect()` function');\r\n        }\r\n        return socket;\r\n    }\r\n\r\n    get defaultPort(): number {\r\n        return this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80);\r\n    }\r\n\r\n    set defaultPort(v: number) {\r\n        if (this[INTERNAL]) {\r\n            this[INTERNAL].defaultPort = v;\r\n        }\r\n    }\r\n\r\n    get protocol(): string {\r\n        return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');\r\n    }\r\n\r\n    set protocol(v: string) {\r\n        if (this[INTERNAL]) {\r\n            this[INTERNAL].protocol = v;\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}