{"version":3,"file":"api.js","sources":["../../../../src/node/sdk/api.ts"],"sourcesContent":["import { StackParser, createStackParser } from \"../../types/stacktrace\";\r\nimport { dirname } from \"../../utils/path\";\r\nimport { nodeStackLineParser } from \"../utils/node-stack-trace\";\r\nimport { posix, sep } from 'node:path';\r\n\r\nfunction normalizeWindowsPath(path: string): string {\r\n    return path\r\n        .replace(/^[A-Z]:/, '') // remove Windows-style prefix\r\n        .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\r\n}\r\n\r\n/** Creates a function that gets the module name from a filename */\r\nexport function createGetModuleFromFilename(\r\n    basePath: string = process.argv[1] ? dirname(process.argv[1]) : process.cwd(),\r\n    isWindows: boolean = sep === '\\\\',\r\n): (filename: string | undefined) => string | undefined {\r\n    const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\r\n\r\n    return (filename: string | undefined) => {\r\n        if (!filename) {\r\n            return;\r\n        }\r\n\r\n        const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let { dir, base: file, ext } = posix.parse(normalizedFilename);\r\n\r\n        if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\r\n            file = file.slice(0, ext.length * -1);\r\n        }\r\n\r\n        if (!dir) {\r\n            // No dirname whatsoever\r\n            dir = '.';\r\n        }\r\n\r\n        const n = dir.lastIndexOf('/node_modules');\r\n        if (n > -1) {\r\n            return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\r\n        }\r\n\r\n        // Let's see if it's a part of the main module\r\n        // To be a part of main module, it has to share the same base\r\n        if (dir.startsWith(normalizedBase)) {\r\n            let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\r\n\r\n            if (moduleName) {\r\n                moduleName += ':';\r\n            }\r\n            moduleName += file;\r\n\r\n            return moduleName;\r\n        }\r\n\r\n        return file;\r\n    };\r\n}\r\n\r\nexport const defaultStackParser: StackParser = createStackParser(nodeStackLineParser(createGetModuleFromFilename()))"],"names":["dirname","sep","posix","createStackParser","nodeStackLineParser"],"mappings":";;;;;;;AAKA,SAAS,oBAAoB,CAAC,IAAI,EAAkB;AACpD,IAAI,OAAO,IAAA;AACX,SAAS,OAAO,CAAC,SAAS,EAAE,EAAE,CAAA;AAC9B,SAAS,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;AAC5B,CAAA;;AAEA;AACO,SAAS,2BAA2B;AAC3C,IAAI,QAAQ,GAAW,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE,GAAEA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,GAAI,OAAO,CAAC,GAAG,EAAE;AACjF,IAAI,SAAS,GAAYC,aAAA,KAAQ,IAAI;AACrC,EAAwD;AACxD,IAAI,MAAM,cAAe,GAAE,SAAU,GAAE,oBAAoB,CAAC,QAAQ,CAAE,GAAE,QAAQ,CAAA;;AAEhF,IAAI,OAAO,CAAC,QAAQ,KAAyB;AAC7C,QAAQ,IAAI,CAAC,QAAQ,EAAE;AACvB,YAAY,OAAM;AAClB,SAAQ;;AAER,QAAQ,MAAM,kBAAmB,GAAE,SAAU,GAAE,oBAAoB,CAAC,QAAQ,CAAE,GAAE,QAAQ,CAAA;;AAExF;AACA,QAAQ,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAI,EAAA,GAAIC,eAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;;AAEtE,QAAQ,IAAI,GAAI,KAAI,KAAM,IAAG,GAAI,KAAI,MAAO,IAAG,GAAI,KAAI,MAAM,EAAE;AAC/D,YAAY,IAAK,GAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,MAAA,GAAS,CAAC,CAAC,CAAC,CAAA;AACjD,SAAQ;;AAER,QAAQ,IAAI,CAAC,GAAG,EAAE;AAClB;AACA,YAAY,GAAA,GAAM,GAAG,CAAA;AACrB,SAAQ;;AAER,QAAQ,MAAM,IAAI,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAA;AAClD,QAAQ,IAAI,CAAA,GAAI,CAAC,CAAC,EAAE;AACpB,YAAY,OAAO,CAAC,EAAA,GAAA,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,SAAA;;AAEA;AACA;AACA,QAAA,IAAA,GAAA,CAAA,UAAA,CAAA,cAAA,CAAA,EAAA;AACA,YAAA,IAAA,UAAA,GAAA,GAAA,CAAA,KAAA,CAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA;;AAEA,YAAA,IAAA,UAAA,EAAA;AACA,gBAAA,UAAA,IAAA,GAAA,CAAA;AACA,aAAA;AACA,YAAA,UAAA,IAAA,IAAA,CAAA;;AAEA,YAAA,OAAA,UAAA,CAAA;AACA,SAAA;;AAEA,QAAA,OAAA,IAAA,CAAA;AACA,KAAA,CAAA;AACA,CAAA;;AAEA,MAAA,kBAAA,GAAAC,4BAAA,CAAAC,kCAAA,CAAA,2BAAA,EAAA,CAAA;;;;;"}