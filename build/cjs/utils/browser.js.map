{"version":3,"file":"browser.js","sources":["../../../src/utils/browser.ts"],"sourcesContent":["import { GLOBAL_OBJ } from \"../worldwide\";\nimport { isString } from \"./object\";\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n\nexport function htmlTreeAsString(\n    elem: unknown,\n    options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n    if (!elem) {\n        return '<unknown>';\n    }\n  \n    // try/catch both:\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    // - can throw an exception in some circumstances.\n    try {\n        let currentElem = elem as SimpleNode;\n        const MAX_TRAVERSE_HEIGHT = 5;\n        const out: string[] = [];\n        let height = 0;\n        let len = 0;\n        const separator = ' > ';\n        const sepLength = separator.length;\n        let nextStr;\n        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n        const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n        \n        while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n            nextStr = _htmlElementAsString(currentElem, keyAttrs);\n            // bail out if\n            // - nextStr is the 'html' element\n                // - the length of the string that would be created exceeds maxStringLength\n                //   (ignore this limit if we are on the first iteration)\n                if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n                  break;\n                }\n          \n                out.push(nextStr);\n          \n            len += nextStr.length;\n            currentElem = currentElem.parentNode;\n        }\n      \n        return out.reverse().join(separator);\n    } catch (_oO) {\n        return '<unknown>';\n    }\n}\n\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n    const elem = el as {\n      tagName?: string;\n      id?: string;\n      className?: string;\n      getAttribute(key: string): string;\n    };\n  \n    const out: string[] = [];\n    let className;\n    let classes;\n    let key;\n    let attr;\n    let i;\n  \n    if (!elem || !elem.tagName) {\n        return '';\n    }\n  \n    // @ts-expect-error WINDOW has HTMLElement\n    if (WINDOW.HTMLElement) {\n        // If using the component name annotation plugin, this value may be available on the DOM node\n        if (elem instanceof HTMLElement && elem.dataset) {\n            if (elem.dataset['ribbanComponent']) {\n                return elem.dataset['ribbanComponent'];\n            }\n            \n            if (elem.dataset['ribbanElement']) {\n                return elem.dataset['ribbanElement'];\n            }\n        }\n    }\n  \n    out.push(elem.tagName.toLowerCase());\n  \n    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n    const keyAttrPairs =\n      keyAttrs && keyAttrs.length\n        ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n        : null;\n  \n    if (keyAttrPairs && keyAttrPairs.length) {\n      keyAttrPairs.forEach(keyAttrPair => {\n        out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n      });\n    } else {\n        if (elem.id) {\n            out.push(`#${elem.id}`);\n        }\n      \n        className = elem.className;\n        if (className && isString(className)) {\n            classes = className.split(/\\s+/);\n            for (i = 0; i < classes.length; i++) {\n                out.push(`.${classes[i]}`);\n            }\n        }\n    }\n\n    const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n    for (i = 0; i < allowedAttrs.length; i++) {\n        key = allowedAttrs[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push(`[${key}=\"${attr}\"]`);\n        }\n    }\n    return out.join('');\n}\n  "],"names":["GLOBAL_OBJ","isString"],"mappings":";;;;;AAGA,MAAM,MAAA,GAASA,oBAAW,EAAA;AAC1B;AACA,MAAM,yBAAA,GAA4B,EAAE,CAAA;;AAO7B,SAAS,gBAAgB;AAChC,IAAI,IAAI;AACR,IAAI,OAAO,GAAiE,EAAE;AAC9E,EAAU;AACV,IAAI,IAAI,CAAC,IAAI,EAAE;AACf,QAAQ,OAAO,WAAW,CAAA;AAC1B,KAAI;;AAEJ;AACA;AACA;AACA,IAAI,IAAI;AACR,QAAQ,IAAI,WAAY,GAAE,IAAK,EAAA;AAC/B,QAAQ,MAAM,mBAAoB,GAAE,CAAC,CAAA;AACrC,QAAQ,MAAM,GAAG,GAAa,EAAE,CAAA;AAChC,QAAQ,IAAI,MAAO,GAAE,CAAC,CAAA;AACtB,QAAQ,IAAI,GAAI,GAAE,CAAC,CAAA;AACnB,QAAQ,MAAM,SAAU,GAAE,KAAK,CAAA;AAC/B,QAAQ,MAAM,SAAA,GAAY,SAAS,CAAC,MAAM,CAAA;AAC1C,QAAQ,IAAI,OAAO,CAAA;AACnB,QAAQ,MAAM,QAAA,GAAW,KAAK,CAAC,OAAO,CAAC,OAAO,CAAA,GAAI,OAAA,GAAU,OAAO,CAAC,QAAQ,CAAA;AAC5E,QAAQ,MAAM,eAAgB,GAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,eAAe,KAAK,yBAAyB,CAAA;;AAEjH,QAAQ,OAAO,WAAY,IAAG,MAAM,EAAG,GAAE,mBAAmB,EAAE;AAC9D,YAAY,UAAU,oBAAoB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;AACjE;AACA;AACA;AACA;AACA,gBAAgB,IAAI,OAAA,KAAY,MAAA,KAAW,MAAA,GAAS,CAAA,IAAK,GAAA,GAAM,GAAG,CAAC,MAAO,GAAE,SAAU,GAAE,OAAO,CAAC,MAAO,IAAG,eAAe,CAAC,EAAE;AAC5H,kBAAkB,MAAK;AACvB,iBAAgB;;AAEhB,gBAAgB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;;AAEjC,YAAY,GAAI,IAAG,OAAO,CAAC,MAAM,CAAA;AACjC,YAAY,WAAY,GAAE,WAAW,CAAC,UAAU,CAAA;AAChD,SAAQ;;AAER,QAAQ,OAAO,GAAG,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;AAC5C,KAAM,CAAA,OAAO,GAAG,EAAE;AAClB,QAAQ,OAAO,WAAW,CAAA;AAC1B,KAAI;AACJ,CAAA;AACA;AACA,SAAS,oBAAoB,CAAC,EAAE,EAAW,QAAQ,EAAqB;AACxE,IAAI,MAAM,IAAK,GAAE,EAAG;;AAKhB,CAAA;;AAEJ,IAAI,MAAM,GAAG,GAAa,EAAE,CAAA;AAC5B,IAAI,IAAI,SAAS,CAAA;AACjB,IAAI,IAAI,OAAO,CAAA;AACf,IAAI,IAAI,GAAG,CAAA;AACX,IAAI,IAAI,IAAI,CAAA;AACZ,IAAI,IAAI,CAAC,CAAA;;AAET,IAAI,IAAI,CAAC,IAAA,IAAQ,CAAC,IAAI,CAAC,OAAO,EAAE;AAChC,QAAQ,OAAO,EAAE,CAAA;AACjB,KAAI;;AAEJ;AACA,IAAI,IAAI,MAAM,CAAC,WAAW,EAAE;AAC5B;AACA,QAAQ,IAAI,IAAK,YAAW,eAAe,IAAI,CAAC,OAAO,EAAE;AACzD,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;AACjD,gBAAgB,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAA;AACtD,aAAY;;AAEZ,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;AAC/C,gBAAgB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;AACpD,aAAY;AACZ,SAAQ;AACR,KAAI;;AAEJ,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAA;;AAExC;AACA,IAAI,MAAM,YAAa;AACvB,MAAM,QAAA,IAAY,QAAQ,CAAC,MAAA;AAC3B,UAAU,QAAQ,CAAC,MAAM,CAAC,OAAA,IAAW,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAA,IAAW,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAA;AACrH,UAAU,IAAI,CAAA;;AAEd,IAAI,IAAI,YAAA,IAAgB,YAAY,CAAC,MAAM,EAAE;AAC7C,MAAM,YAAY,CAAC,OAAO,CAAC,eAAe;AAC1C,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAC3D,OAAO,CAAC,CAAA;AACR,WAAW;AACX,QAAQ,IAAI,IAAI,CAAC,EAAE,EAAE;AACrB,YAAY,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA,CAAA,CAAA;AACA,SAAA;;AAEA,QAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA;AACA,QAAA,IAAA,SAAA,IAAAC,eAAA,CAAA,SAAA,CAAA,EAAA;AACA,YAAA,OAAA,GAAA,SAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA;AACA,YAAA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,aAAA;AACA,SAAA;AACA,KAAA;AACA;AACA,IAAA,MAAA,YAAA,GAAA,CAAA,YAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,YAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,GAAA,GAAA,YAAA,CAAA,CAAA,CAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA;AACA,QAAA,IAAA,IAAA,EAAA;AACA,YAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,EAAA,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,SAAA;AACA,KAAA;AACA,IAAA,OAAA,GAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA;;;;"}